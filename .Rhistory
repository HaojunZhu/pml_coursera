install.packages('knitr')
install.packages('TSA')
install.packages("knitr")
install.packages('forecast')
data(mtcars)
names(mtcars)
head(mtcars)
plot(mpg~wt, data=mtcars)
fit <- lm(mpg ~ cyl, data=mtcars)
knitr2html()
knit2html()
?knit2html
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
adData = data.frame(predictors)
trainIndex = createDataPartition(diagnosis,p=0.5,list=FALSE)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
dim(training)
dim(testing)
trainIndex
data(concrete)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
inTrain
createDataPartition(mixtures$CompressiveStrength, p = 3/4)
createDataPartition(mixtures$CompressiveStrength, p = 3/4) -> a
str(a)
a[[1]]
training
min(training)
min(testing)
concrete
names(concrete)
hist(concrete$Superplasticizer)
min(concrete$Superplasticizer)
hist(log(concrete$Superplasticizer + 1))
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
training
names(training)
IL_str <- grep("^IL", colnames(training), value = TRUE)
IL_str
preProc <- preProcess(training[, IL_str], method = 'pca', thresh = 0.8)
preProc
preProc$rotation
data(Wage)
?grep
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
?predictors
predictors_IL <- predictors[, IL_str]
predictors_IL
names(predictors_IL)
library(caret)
?createDataPartition
data(soam)
data(spam)
spam
dataset(spam)
spam
library(kernlab)
inTrain <- createDataPartition(y=spam$type, p=0.75, list=FALSE)
data(spam)
inTrain <- createDataPartition(y=spam$type, p=0.75, list=FALSE)
inTrain
inTrain <- createDataPartition(y=spam$type, p=0.75, list=TRUE)
inTrain
createFolds(y=spam$type, k=10, list=TRUE, returnTr)
createFolds(y=spam$type, k=10, list=TRUE, returnTrain=FALSE)
createFolds(y=spam$type, k=10, list=TRUE, returnTrain=FALSE) ->folds
folds
str(folds)
folds$Fold01
createFolds(y=spam$type, k=10, list=TRUE, returnTrain=TRUE) ->folds
folds$Fold01
createFolds(y=spam$type, k=10, list=FALSE, returnTrain=TRUE) ->folds
folds
dim(folds)
size(folds)
str(folds)
tme = 1:1000
folds <- createTimeSlices(y=tme, initialWindow=20, horizon=10)
names(folds )
folds$train
str(folds )
names(folds)
folds$train[[2]]
folds$train[[12]]
library(ISLR)
install.packages(ISLR
)
install.packages('ISLR'
)
data(Wage)
# create training and test sets
inTrain <- createDataPartition(y=Wage$wage,p=0.7, list=FALSE)
training <- Wage[inTrain,]
testing <- Wage[-inTrain,]
# plot relationships between the predictors and outcome
featurePlot(x=training[,c("age","education","jobclass")], y = training$wage,plot="pairs")
library(ISLR)
data(Wage)
# create training and test sets
inTrain <- createDataPartition(y=Wage$wage,p=0.7, list=FALSE)
training <- Wage[inTrain,]
testing <- Wage[-inTrain,]
# plot relationships between the predictors and outcome
featurePlot(x=training[,c("age","education","jobclass")], y = training$wage,plot="pairs")
?featurePlot
qplot(age,wage,colour=education,data=training)+geom_smooth(method='lm',formula=y~x)
qplot(age,wage,colour=education,data=training)
qplot(age,wage,colour=education,data=training) ->
bb
bb
?geom_smooth
bb + geom_smooth(stat = 'identitity')
bb + geom_smooth(stat = 'identity')
bb + geom_smooth(stat = 'lm')
bb + geom_smooth(method = 'lm')
bb + geom_smooth(method = 'lm', formula = y~x)
install.packages('Hmisc')
library(Hmisc);library(gridExtra);
# cute the wage variable
cutWage <- cut2(training$wage,g=3)
cutWage
p1 <- qplot(cutWage,age, data=training,fill=cutWage,
geom=c("boxplot"))
p2 <- qplot(cutWage,age, data=training,fill=cutWage,
geom=c("boxplot","jitter"))
p1
grid.arrange(p1,p2,ncol=2)
training
names(training)
?prop.table
m <- matrix(1:4, 2)
m
prop.table(m, 1)
m <- matrix(1:4, 2)
m
prop.table(m, 2)
m <- matrix(1:4, 2)
m
prop.table(m, c(1,2))
qplot(wage, color = education, data=training)
qplot(wage, color = education, data=training, geom = 'density')
names(training)
?training
??training
?train
?preProcess
# load spam data
data(spam)
# create train and test sets
inTrain <- createDataPartition(y=spam$type,p=0.75, list=FALSE)
training <- spam[inTrain,]
testing <- spam[-inTrain,]
training[,-58]
training[,-58] -> nn
dim(nn)
dim(training)
preObj
#h = outcome)
preObj <- preProcess(training[,-58],method=c("center","scale"))
preObj
str(preObj)
trainCapAveS <- predict(preObj,training[,-58])$capitalAve
trainCapAveS
predict(preObj,training[,-58])$
predict(preObj,training[,-58])\
predict(preObj,training[,-58])
names(training)
dim(training)
training[,58]
training[,-58]
training[,-58]
names(training)
trainCapAveS <- predict(preObj,training[,-58])$capitalAve
# normalize test set using training parameters
testCapAveS <- predict(preObj,testing[,-58])$capitalAve
# compare results for capitalAve variable
rbind(train = c(mean = mean(trainCapAveS), std = sd(trainCapAveS)),
test = c(mean(testCapAveS), sd(testCapAveS)))
rbind(train = c(aa = mean(trainCapAveS), bb = sd(trainCapAveS)),
test = c(mean(testCapAveS), sd(testCapAveS)))
rbind(train = c(aa = mean(trainCapAveS), bb = sd(trainCapAveS)),
test = c(mean(testCapAveS), bc = sd(testCapAveS)))
preObj <- preProcess(training[,-58],method=c("BoxCox"))
head(preObj)
preObj
str(preObj)
rbinom(dim(training)[1],size=1,prob=0.05)
rbinom(11,size=1, prob=0.05)
rbinom(11,size=2, prob=0.05)
?rbinom
test_clean[, -length(names(test_clean))]
setwd('~/Coursera/Practical Machine Learning/project')
url_train <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
url_test <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
file_train <- "~/pml-training.csv"
file_test <- "~/pml-testing.csv"
if (!file.exists(file_train)){
download.file(url_train, destfile = file_train)
}
if (!file.exists(file_test)){
download.file(url_test, destfile = file_test)
}
```
Read the raw data sets into R.
```{r}
train_raw <- read.csv(file_train)
test_raw <- read.csv(file_test)
```
### Data Cleaning
First, columns that contain missing values are excluded.
```{r}
train_raw <- train_raw[, colSums(is.na(train_raw)) == 0]
test_raw <- test_raw[, colSums(is.na(test_raw)) == 0]
```
Since there are several columns, such as timesteps, that do not contribute to the prediction, we remove them from both the training and test sets. Also, columns that consistute of non-numeric values are excluded as well.
```{r}
# remove columns whose names contain X, timestamp, or window
trainRemove <- grepl("^X|timestamp|window", names(train_raw))
train_raw <- train_raw[, !trainRemove]
# only keep columns that have numeric values
train_clean <- train_raw[, sapply(train_raw, is.numeric)]
train_clean$classe <- train_raw$classe
# remove columns whose names contain X, timestamp, or window
testRemove <- grepl("^X|timestamp|window", names(test_raw))
test_raw <- test_raw[, !testRemove]
# only keep columns that have numeric values
test_clean <- test_raw[, sapply(test_raw, is.numeric)]
test_clean$classe <- test_raw$classe
```
The remaining columns are therefore.
```{r}
colnames(train_clean)
```
### Data Slicing
For the cleaned training set, we split 60% into sub-training set, and 40% into sub-test set.
```{r}
inTrain <- createDataPartition(train_clean$classe, p = 0.6, list = FALSE)
training <- train_clean[inTrain, ]
testing <- train_clean[-inTrain, ]
fitRF <- train(classe ~ ., data=training, method="rf", trControl = trainControl(method='cv', 3), ntree=200)
fitRF
---
title: "Practical Machine Learning Course Project"
author: "Haojun Zhu"
date: "August 19, 2015"
output: html_document
---
## Introduction
Using devices such as Jawbone Up, Nike FuelBand, and Fitbit it is now possible to collect a large amount of data about personal activity relatively inexpensively. These type of devices are part of the quantified self movement â€“ a group of enthusiasts who take measurements about themselves regularly to improve their health, to find patterns in their behavior, or because they are tech geeks. One thing that people regularly do is quantify how much of a particular activity they do, but they rarely quantify how well they do it. In this project, your goal will be to use data from accelerometers on the belt, forearm, arm, and dumbell of 6 participants. They were asked to perform barbell lifts correctly and incorrectly in 5 different ways. More information is available from the website here: http://groupware.les.inf.puc-rio.br/har (see the section on the Weight Lifting Exercise Dataset).
## Data Processing
### Data Input
First, load the necessary packages.
```{r, message = FALSE, warning = FALSE}
library(caret)
library(rpart)
library(rpart.plot)
library(corrplot)
library(randomForest)
```
Download the training data and test data for this project.
```{r}
setwd('~/Coursera/Practical Machine Learning/project')
url_train <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
url_test <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
file_train <- "~/pml-training.csv"
file_test <- "~/pml-testing.csv"
if (!file.exists(file_train)){
download.file(url_train, destfile = file_train)
}
if (!file.exists(file_test)){
download.file(url_test, destfile = file_test)
}
```
Read the raw data sets into R.
```{r}
train_raw <- read.csv(file_train)
test_raw <- read.csv(file_test)
```
### Data Cleaning
First, columns that contain missing values are excluded.
```{r}
train_raw <- train_raw[, colSums(is.na(train_raw)) == 0]
test_raw <- test_raw[, colSums(is.na(test_raw)) == 0]
```
Since there are several columns, such as timesteps, that do not contribute to the prediction, we remove them from both the training and test sets. Also, columns that consistute of non-numeric values are excluded as well.
```{r}
# remove columns whose names contain X, timestamp, or window
trainRemove <- grepl("^X|timestamp|window", names(train_raw))
train_raw <- train_raw[, !trainRemove]
# only keep columns that have numeric values
train_clean <- train_raw[, sapply(train_raw, is.numeric)]
train_clean$classe <- train_raw$classe
# remove columns whose names contain X, timestamp, or window
testRemove <- grepl("^X|timestamp|window", names(test_raw))
test_raw <- test_raw[, !testRemove]
# only keep columns that have numeric values
test_clean <- test_raw[, sapply(test_raw, is.numeric)]
test_clean$classe <- test_raw$classe
```
The remaining columns are therefore.
```{r}
colnames(train_clean)
```
### Data Slicing
For the cleaned training set, we split 60% into sub-training set, and 40% into sub-test set.
```{r}
inTrain <- createDataPartition(train_clean$classe, p = 0.6, list = FALSE)
training <- train_clean[inTrain, ]
testing <- train_clean[-inTrain, ]
```
## Algorithm
### Random Forest
```{r}
fitRF <- train(classe ~ ., data=training, method="rf", trControl = trainControl(method='cv', 3), ntree=200)
fitRF
predictRF <- predict(fitRF, testing)
confusionMatrix(testing$classe, predictRF)
test_clean[, -length(names(test_clean))]
-length(names(test_clean))
test_clean
dim(test_clean)
test_clean[,-53]
test_clean[,-53] -> bb
dim(bb)
predict(fitRF, bb)
names(test_clean
)
test_clean$classe
predict(fitRF, test_clean)
fit1 <- train(classe ~ ., data=training, method="rf", trControl = trainControl(method="cv", 3), preProcess=c("center", "scale"))
fit1
predict1 <- predict(fit1, testing)
confusionMatrix(testing$classe, predict1)
fit2 <- train(classe ~ ., data=training, method="rf", trControl = trainControl(method="cv", 3))
corrplot(cor(training))
corrplot(cor(training[, -53]))
fancyRpartPlot(fot1)
install.package('rattle')
install.packages('rattle')
library('rattle')
fancyRpartPlot(fot1)
fancyRpartPlot(fit1)
mod1 <- rpart(classe ~ ., data=training, method=)
mod1 <- rpart(classe ~ ., data=training)
fancyRpartPlot(mod1)
mod1 <- rpart(classe ~ ., data=training, method = 'class')
fancyRpartPlot(mod1)
prp(mod1)
confusionMatrix(testing$classe, predict1)
confusionMatrix(testing$classe, predict2)
confusionMatrix(testing$classe, predict1)
confusionMatrix(testing$classe, predict2)
predict2 <- predict(fit2, testing)
confusionMatrix(testing$classe, predict2)
names(test_clean)
test_result <- predict(fit2, test_clean[, -53])
test_result
pml_write_files = function(x){
n = length(x)
for(i in 1:n){
filename = paste0("problem_id_",i,".txt")
write.table(x[i],file=filename,quote=FALSE,row.names=FALSE,col.names=FALSE)
}
}
getwd()
pml_write_files(test_result)
pml_write_files = function(x){
n = length(x)
for(i in 1:n){
filename = paste0("~/answer/problem_id_",i,".txt")
write.table(x[i],file=filename,quote=FALSE,row.names=FALSE,col.names=FALSE)
}
}
pml_write_files(test_result)
dir.create("~/answer")
setwd("~/answer")
pml_write_files(test_result)
getwd()
dir.create("~/Coursera/Practical Machine Learning/project/answer")
setwd("~/Coursera/Practical Machine Learning/project/answer")
pml_write_files(test_result)
pml_write_files(test_result)
getwd()
pml_write_files = function(x){
n = length(x)
for(i in 1:n){
filename = paste0("problem_id_",i,".txt")
write.table(x[i],file=filename,quote=FALSE,row.names=FALSE,col.names=FALSE)
}
}
dir.create("~/Coursera/Practical Machine Learning/project/answer")
setwd("~/Coursera/Practical Machine Learning/project/answer")
pml_write_files(test_result)
setwd('~/Coursera/Practical Machine Learning/project')
file.exists("./answer")
if (!file.exists("./answer")) {
dir.create("./answer")
}
setwd("./answer")
pml_write_files(test_result)
?knit2html
??knit2html
setwd('~/Coursera/Practical Machine Learning/project')
library(knitr)
knit2html("project.Rmd")
